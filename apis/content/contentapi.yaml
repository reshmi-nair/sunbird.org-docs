openapi: 3.0.1
info:
  title: Sunbird Content Management API(s)
  description: >-
    The Content Management API allows you to manage content over the sunbird
    platform.Apis perform operations related to all the _Content_ on the Sunbird
    Platform. 

    - Each of the endpoints serve a different purpose, so which one to use
    depends on what you want to do

    - The operations include CRUD (Create, Update, Read and Delete) operations
    and other operations such as upload, publish, flag, link Dialcode, etc. 

    - The URL for Sunbird Content API(s) is `content/v1` 

    -
    [TestCases](https://app.getpostman.com/run-collection/1122b59b7dc69b2b370b)
  termsOfService: 'https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE'
  contact:
    email: info@sunbird.org
  version: "1.0"
servers:
  - url: 'https://staging.sunbirded.org/api'
paths:
  /content/v1/create:
    post:
      tags:
        - Content APIs
      summary: Create Content
      description: |-
        This API is associated with creating content on the Sunbird Platform.
          - The endpoint for **Create Content** is `/content/v1/create`
          - It points to knowledge-mw-service - `/v1/content/create`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      operationId: Create Content
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          required: true
          schema:
            type: string
        - name: x-channel-id
          in: header
          description: >-
            Represents a physical location (e.g: state) uniquely to which the
            user belongs.
          required: true
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:'
           
           - JSON 

          The body is the representation of the resource object for creating
          content (an array of parameters which describes the content) 

          - Please refer for supported
          [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/content/1.0/schema.json)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContentRequest'
            example:
              request:
                content:
                  name: H5P Content
                  code: h5pcontent
                  mimeType: application/vnd.ekstep.h5p-archive
                  contentType: Resource
                  createdBy: 874ed8a5-782e-4f6c-8f36-e0288455901e
        required: true
      responses:
        '200':
          description: SUCCESS. The **Create Content** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateSuccessResponse'
              example:
                id: api.content.create
                ver: '3.0'
                ts: '2020-12-10T20:24:45ZZ'
                params:
                  resmsgid: 3be02c4b-3324-41a3-afd8-60f6be0584d2
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_1131697204035993601314
                  node_id: do_1131697204035993601314
                  versionKey: '1607631885207'
        '400':
          description: >-
            'BAD REQUEST. The **Create Content** operation failed. You may have
            missed input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.content.create
                ver: '1.0'
                ts: '2020-12-10T08:50:29.786Z'
                params:
                  resmsgid: c169a7a0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: ERR_CONTENT_CREATE_FIELDS_MISSING
                  errmsg: Required fields for create content are missing
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.content.create
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /content/v1/update/{Content_Id}:
    patch:
      description: |-
        This API is associated with updating content on the Sunbird Platform .
          - **_/Update/_** endpoint executes the "Update Content" request based on parameters provided as metadata in the request body.
          - The endpoint for **Update Content** is `/content/v1/update`
          - It points to knowledge-mw-service - `/v1/content/update`
          - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Update Content
      tags:
        - Content APIs
      operationId: Update Content
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          required: true
          description: The Registered User ID used to execute the API.
          schema:
            type: string
        - name: X-Channel-id
          in: header
          required: false
          description: The unique ID provided to the State to which the user belongs.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContentrequest'
            example:
              request:
                content:
                  versionKey: '1607631400608'
                  description: Updated description
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the content to be updated.
            - Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/content/1.0/schema.json)
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation.Content update operation was successfuly
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateSuccessResponse'
              example:
                id: api.content.update
                ver: '4.0'
                ts: '2020-12-10T20:26:07ZZ'
                params:
                  resmsgid: 80aa9310-b749-411c-a13b-8d9f25af389f
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_1131697204035993601314
                  node_id: do_1131697204035993601314
                  versionKey: '1607631967842'
        '400':
          description: >-
            BAD REQUEST. The 'Update Content' operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.content.update
                ver: '4.0'
                ts: '2020-12-10T20:27:01ZZ'
                params:
                  resmsgid: 87eb99c6-bc10-406a-a6fe-13651f546ce1
                  msgid: null
                  err: ERR_INVALID_REQUEST
                  status: failed
                  errmsg: Please Provide Version Key!
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Update** operation failed !The possible
            reason for failure is that you may have provided wrong content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.content.update
                ver: '3.0'
                ts: '2020-12-12T00:31:16ZZ'
                params:
                  resmsgid: c29ffd8b-d105-4eeb-a875-deaeae2bf5b8
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_21317015414162227213604
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /content/v1/upload/{Content_Id}:
    post:
      description: |-
        This API is associated with uploading content on the Sunbird Platform .
           - The**_/upload/{content Id}_** endpoint executes "Upload Content" request based on parameters provided as metadata in the request body.
           - The endpoint for **Upload Content** is `/content/v1/upload`
          - It points to knowledge-mw-service - `/v1/content/upload`
          - {...}refers to a section of upload endpoint URL path that needs to be replaced by appropriate Id.
           - You need to provide a valid content Id value in {Content Id} field of API URL.
           - It is mandatory to provide values for parameters marked with *. 
           - Mandatory fields cannot be null or empty.
      summary: Upload Content
      tags:
        - Content APIs
      operationId: Upload Content
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
          schema:
            type: string
        - name: X-Authenticated-Userid
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: Content package file which you intend to upload
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: >-
            OK ! Successful operation."Content upload" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentUploadSuccessResponse'
              example:
                id: api.content.upload
                ver: '3.0'
                ts: '2020-12-10T21:00:16ZZ'
                params:
                  resmsgid: 4505a08c-9d0c-447b-8b3f-692e31f841fd
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_1131697376667402241315
                  artifactUrl: >-
                    https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/content/do_112547906582659072139/artifact/pdf_1531726896452.pdf
                  content_url: >-
                    https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/content/do_112547906582659072139/artifact/pdf_1531726896452.pdf
                  node_id: do_1131697376667402241315
                  versionKey: '1607634016927'
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Review** operation failed !The
            possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.content.upload
                ver: '3.0'
                ts: '2020-12-10T21:21:20ZZ'
                params:
                  resmsgid: 58139c89-2852-4673-b414-2f867c91bbc1
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_11316973766674022413151
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /content/v1/upload/url/{Content_Id}:
    post:
      description: |-
        This API is associated with uploading content on the Sunbird Platform .
           - The**_/upload/url/{content Id}_** endpoint executes "Upload Content URL" request based on parameters provided as metadata in the request body.
           - The endpoint for **Upload Content URL** is `/content/v1/upload/url`
          - It points to knowledge-mw-service - `/v1/content/upload/url`
          - {...}refers to a section of upload endpoint URL path that needs to be replaced by appropriate Id.
           - You need to provide a valid content Id value in {Content Id} field of API URL.
           - On Success api returns pre-signed-url link with come configured ttl against which file can be uploaded.
           - It is mandatory to provide values for parameters marked with *. 
           - Mandatory fields cannot be null or empty.
      summary: Upload URL
      tags:
        - Content APIs
      operationId: Upload URL
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: X-Authenticated-Userid
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadUrlContentRequest'
            example:
              request:
                content:
                  fileName: test.pdf
        description: |-
          The body refers to the format of the request.
            - The body contains file name against which pre-signed url has to be generated.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Content upload" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentUploadUrlSuccessResponse'
              example:
                id: api.content.upload.url
                ver: '3.0'
                ts: '2020-12-11T23:52:44ZZ'
                params:
                  resmsgid: 81e308fa-3e36-45ff-b295-e28e8f757dc7
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_11317053041892556811094
                  url_expiry: '54000'
                  pre_signed_url: >-
                    https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/assets/do_11317053041892556811094/10-page-pdf.pdf?sv=2017-04-17&se=2020-12-12T14%3A52%3A44Z&sr=b&sp=w&sig=Tlt6uWI/6lMeupkEbsTAmGajmo1qzw8HeUHrVwOm6yk%3D
        '400':
          description: >-
            BAD REQUEST. The 'Upload Url' operation failed ! The possible reason
            for failure is that you may have missed providing input for a
            mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.content.upload.url
                ver: '3.0'
                ts: '2020-12-11T23:54:07ZZ'
                params:
                  resmsgid: 4edde64d-3116-4271-bcc1-a8ba0ec2d56b
                  msgid: null
                  err: ERR_CONTENT_BLANK_FILE_NAME
                  status: failed
                  errmsg: File name is blank
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Id sent for generating upload url**
            operation failed !The possible reason for failure is that you may
            have provided wrong content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.upload.url
                ver: '1.0'
                ts: '2020-12-11T23:48:26.694Z'
                params:
                  resmsgid: 5cf72660-3c0b-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_11254577204586086415
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /content/v1/read/{Content_Id}:
    get:
      description: >-
        This API is associated with viewing and reading out the content on the
        Sunbird Platform .
          - The **_/read/{contentId}_** endpoint executes request for fetching the contents to be viewed and read.
          - The endpoint for **Read Content** is `/content/v1/read`
          - It points to knowledge-mw-service - `/v1/content/read`
          - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.
          - You need to provide a valid content Id value in {Content Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Read Content
      tags:
        - Content APIs
      operationId: Read Content
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: false
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Read content" operation was successfully
            executed. For all possible metadata, please
            [refer](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/content/1.0/schema.json)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentGetSuccessResponse'
              example:
                id: api.content.read
                ver: '1.0'
                ts: '2020-12-10T20:38:32.510Z'
                params:
                  resmsgid: ab16e5e0-3b27-11eb-b0a2-8d5c9f561887
                  msgid: ab131550-3b27-11eb-b0a2-8d5c9f561887
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  content:
                    ownershipType:
                      - createdBy
                    code: org.sunbird.EHdZir
                    credentials:
                      enabled: 'No'
                    channel: channel-1
                    language:
                      - English
                    mimeType: application/vnd.ekstep.h5p-archive
                    idealScreenSize: normal
                    createdOn: '2020-12-10T20:38:13.315+0000'
                    objectType: Content
                    primaryCategory: Learning Resource
                    contentDisposition: inline
                    lastUpdatedOn: '2020-12-10T20:38:13.315+0000'
                    contentEncoding: gzip
                    contentType: Resource
                    dialcodeRequired: 'No'
                    trackable:
                      enabled: 'No'
                      autoBatch: 'No'
                    identifier: do_21316972702362828813477
                    lastStatusChangedOn: '2020-12-10T20:38:13.315+0000'
                    audience:
                      - Student
                    os:
                      - All
                    visibility: Default
                    consumerId: 2eaff3db-cdd1-42e5-a611-bebbf906e6cf
                    mediaType: content
                    osId: org.ekstep.quiz.app
                    languageCode:
                      - en
                    version: 2
                    versionKey: '1607632693315'
                    license: CC BY 4.0
                    idealScreenDensity: hdpi
                    framework: NCF
                    createdBy: 874ed8a5-782e-4f6c-8f36-e0288455901e
                    compatibilityLevel: 1
                    name: Test_h5p
                    status: Draft
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Read** operation failed !The possible
            reason for failure is that you may have provided wrong content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.content.read
                ver: '1.0'
                ts: '2020-12-10T20:37:58.223Z'
                params:
                  resmsgid: 96a71df0-3b27-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_1131697204035993601314
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /content/v1/review/{Content_Id}:
    post:
      description: >-
        >- This API is associated with Submission of content for Review  on the
        Sunbird Platform .
          - The**_/review/{content Id}_** endpoint executes "Submit for Review" request based on parameters provided as metadata in the request body.
          - The endpoint for **Review Content** is `/content/v1/review`
          - It points to knowledge-mw-service - `/v1/content/review`
          - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - You need to provide a valid content Id value in {Content Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Submit for Review
      tags:
        - Content APIs
      operationId: Submit for Review
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: X-Authenticated-User-token
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the content to be sent for review.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation.Content sent for review operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateSuccessResponse'
              example:
                id: ekstep.learning.content.review
                ver: '3.0'
                ts: '2020-12-10T21:06:26ZZ'
                params:
                  resmsgid: 186cf9a9-8094-4cdd-926f-b77a030921d1
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  node_id: do_1131697376667402241315
                  versionKey: '1607634386533'
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Review** operation failed !The
            possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: ekstep.learning.content.review
                ver: '3.0'
                ts: '2020-12-10T21:06:54ZZ'
                params:
                  resmsgid: 944ac944-78d9-43e2-bfd5-337ab52b6552
                  msgid: null
                  err: ERR_TAXONOMY_INVALID_CONTENT
                  status: failed
                  errmsg: >-
                    Error! While Fetching the Content for Operation | [Content
                    Id: do_11316973766674022413151]
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! We track
            these errors automatically, but if the problem persists feel free to
            contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /content/v1/publish/{Content_Id}:
    post:
      description: |-
        This API is associated with publishing content on the Sunbird Platform .
          - **_/publish/_** endpoint executes the "Publish Content" request based on parameters provided as metadata in the request body.
          - The endpoint for **Publish Content** is `/content/v1/publish`
          - It points to knowledge-mw-service - `/v1/content/publish`
          -  {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Publish Content
      tags:
        - Content APIs
      operationId: Publish Content
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Content Id to be published
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
          schema:
            type: string
        - name: X-Authenticated-User-token
          in: header
          required: true
          description: 'User Registered ID , which is used for logging In'
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: Authorizing user in order to grant access.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishContentRequest'
            example:
              request:
                content:
                  lastPublishedBy: Ekstep
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the content to be published.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation.**Content publish operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentPublishSuccessResponse'
              example:
                id: api.v3.publish
                ver: '1.0'
                ts: '2020-12-10T21:41:23.491Z'
                params:
                  resmsgid: 72c4ef30-3b30-11eb-b0a2-8d5c9f561887
                  msgid: 72979da0-3b30-11eb-b0a2-8d5c9f561887
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  content_id: do_21316975736724684813479
                  publishStatus: >-
                    Publish Operation for Content Id
                    'do_21316975736724684813479' Started Successfully!
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Review** operation failed !The
            possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.v3.publish
                ver: '1.0'
                ts: '2020-12-10T21:51:39.870Z'
                params:
                  resmsgid: e228e7e0-3b31-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_213169757367246848134791
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! We track
            these errors automatically, but if the problem persists feel free to
            contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /content/v1/reject/{Content_Id}:
    post:
      description: |-
        This API is associated with rejecting content under review.
          - The **_/reject/{contentId}_** endpoint executes request for rejecting content which is under review. 
          - The endpoint for **Reject Content** is `/content/v1/reject`
          - It points to knowledge-mw-service - `/v1/content/reject`
          - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.
          - You need to provide a valid content Id value in {Content Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Reject Content Review
      tags:
        - Content APIs
      operationId: Reject Content Review
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example: {}
        description: |-
          The body refers to the format of the request.
           - The body contains request about setting flag to reject for content in review process.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Content reject" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentRejectSuccessResponse'
              example:
                id: api.v3.reject
                ver: '1.0'
                ts: '2020-12-11T08:09:46.451Z'
                params:
                  resmsgid: 3b7c1230-3b88-11eb-b0a2-8d5c9f561887
                  msgid: 3b692670-3b88-11eb-b0a2-8d5c9f561887
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id: do_213168073757138944196
                  versionKey: '1607674186357'
        '400':
          description: >-
            ERROR CONTENT NOT IN REVIEW STATUS ! Looks like contentId provided
            is not in review status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.v3.reject
                ver: '1.0'
                ts: '2020-12-11T08:03:51.807Z'
                params:
                  resmsgid: 6819b0f0-3b87-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: ERR_CONTENT_NOT_IN_REVIEW
                  errmsg: >-
                    Content is not in review state for identifier:
                    do_2131680942619115521243
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: >-
            RESOURCE NOT FOUND ! Looks like contentId provided is not a valid
            content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.v3.reject
                ver: '1.0'
                ts: '2020-12-11T08:08:30.454Z'
                params:
                  resmsgid: 0e2fd960-3b88-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_2123462720305561601147
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /content/v1/flag/{Content_Id}:
    post:
      description: |-
        This API is associated with setting Flag for content.
          - The **_/flag/{content Id}_** endpoint executes a request to set flagging status for content ,flag can either be set to "Accepted" or "Rejected".
          - The endpoint for **Flag Content** is `/content/v1/flag`
          - It points to knowledge-mw-service - `/v1/content/flag`
          - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.
          - You need to provide a valid content Id value in {Content Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Flag Content
      tags:
        - Content APIs
      operationId: Flag Content
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: X-Authenticated-Userid
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example: {}
        description: |-
          The body refers to the format of the request.
           - The body contains request about setting flag to "Accept" or "Reject" for content in review process.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Content Flagging" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentFlagSuccessResponse'
              example:
                id: api.content.flag
                ver: '3.0'
                ts: '2020-12-11T08:45:49ZZ'
                params:
                  resmsgid: 9c935e0c-b504-45e6-bd15-313f46c4613f
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_213143334457982976144
                  node_id: do_213143334457982976144
                  versionKey: '1607676349236'
        '400':
          description: >-
            ERR_CONTENT_NOT_FLAGGABLE! Looks like contentId is not in flaggable
            status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.content.flag
                ver: '3.0'
                ts: '2020-12-11T08:44:53ZZ'
                params:
                  resmsgid: 2ff1945b-a114-44ca-929e-7d19a6f8a745
                  msgid: null
                  err: ERR_CONTENT_NOT_FLAGGABLE
                  status: failed
                  errmsg: >-
                    Unpublished Content do_213168073757138944196 cannot be
                    flagged
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Flag** operation failed !The
            possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.content.flag
                ver: '3.0'
                ts: '2020-12-11T09:41:41ZZ'
                params:
                  resmsgid: 5b4f0b33-3941-4c18-b8bf-123c2e0348e6
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_2131433344579829761441
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /content/v1/flag/reject/{Content_Id}:
    post:
      description: >-
        This API is associated with setting Reject Flag for content under review process on the Sunbird Platform .
          - The **_/flag/reject/_**endpoint executes request for flagging content under review to "Reject flag", if content is found in-appropriate.
          - The endpoint for **Flag Reject Content** is `/content/v1/flag/reject`
          - It points to knowledge-mw-service - `/v1/content/flag/reject`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Reject Flag
      tags:
        - Content APIs
      operationId: Reject Flag
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: X-Authenticated-User-token
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example: {}
        description: The body refers to the format of the request.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Reject Flag" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateSuccessResponse'
        '400':
          description: >-
            ERR CONTENT NOT FLAGGED! Looks like contentId is not in flagged
            status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Flag Reject** operation failed
            !The possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /content/v1/flag/accept/{Content_Id}:
    post:
      description: >-
        This API is associated with setting Accept Flag for content under review
        process on the Sunbird Platform .
          - The **_/flag/accept/_**endpoint executes request for flagging content under review to "Accept flag", if content is found appropriate.
          - The endpoint for **Flag Accept Content** is `/content/v1/flag/accept`
          - It points to knowledge-mw-service - `/v1/content/flag/accept`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Accept Flag
      tags:
        - Content APIs
      operationId: Accept Flag
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
          schema:
            type: string
        - name: X-Authenticated-User-token
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlagAcceptContentRequest'
            example:
              request:
                versionKey: '1507102327646'
      responses:
        '200':
          description: >-
            OK ! Successful operation."Accept Flag" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateSuccessResponse'
              example:
                id: api.flag.accept
                ver: '1.0'
                ts: '2020-12-11T11:40:01.464Z'
                params:
                  resmsgid: 9a9e4b80-3ba5-11eb-b0a2-8d5c9f561887
                  msgid: 9a49e9f0-3ba5-11eb-b0a2-8d5c9f561887
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_31221753157709004825531
                  node_id: do_31221753157709004825531
                  versionKey: '1607686801161'
        '400':
          description: >-
            BAD REQUEST. The "Accept Flag" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.flag.accept
                ver: '1.0'
                ts: '2020-12-11T11:25:34.614Z'
                params:
                  resmsgid: 95ef7b60-3ba3-11eb-be5b-f9d249ba9049
                  msgid: null
                  status: failed
                  err: ERR_INVALID_CONTENT
                  errmsg: Invalid Flagged Content! Content Can Not Be Accepted.
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Flag Accept** operation failed
            !The possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.flag.accept
                ver: '1.0'
                ts: '2020-12-11T11:24:42.903Z'
                params:
                  resmsgid: 771d0270-3ba3-11eb-be5b-f9d249ba9049
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_213143334457982976144
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /content/v1/retire/{Content_Id}:
    delete:
      description: |-
        This API is associated with retiring content on the Sunbird Platform .
          - The **_/retire/{contentId}_** endpoint executes  "Retire Content" request based on content Id to delete the specific content.'
          - The endpoint for **Retire Content** is `/content/v1/retire`
          - It points to knowledge-mw-service - `/v1/content/retire`
          - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - It is mandatory to provide values for parameters.
          - Mandatory fields cannot be null or empty.
      summary: Retire Content
      tags:
        - Content APIs
      operationId: Retire Content
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: X-Authenticated-User-token
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation.**Content deletion operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentRetireSuccessResponse'
              example:
                id: api.content.retire
                ver: '3.0'
                ts: '2020-12-11T12:05:52ZZ'
                params:
                  resmsgid: ebd2655a-a69a-460c-9bcf-0f45f5938fac
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_11283183576849612818
                  node_id: do_11283183576849612818
        '400':
          description: ERR CONTENT RETIRE! Content is already retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.content.retire
                ver: '3.0'
                ts: '2020-12-11T12:01:24ZZ'
                params:
                  resmsgid: ec20ec05-581c-4559-988a-449f3c5ae698
                  msgid: null
                  err: ERR_CONTENT_RETIRE
                  status: failed
                  errmsg: >-
                    Content with Identifier do_11316298360130764811 is already
                    Retired.
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Flag Accept** operation failed
            !The possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.content.retire
                ver: '3.0'
                ts: '2020-12-11T11:56:35ZZ'
                params:
                  resmsgid: d826e808-2866-4603-9b60-0a3130a37128
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_213143334457982976144
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /content/v1/copy/{Content_Id}:
    post:
      description: |-
        This API is associated with copying a content on the Sunbird Platform .
          - The **_/copy/_**endpoint executes request for copy content, if content is found appropriate.
          - The endpoint for **Copy Content** is `/content/v1/copy`
          - It points to knowledge-mw-service - `/v1/content/copy`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Copy Content
      tags:
        - Content APIs
      operationId: Copy Content
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: X-Authenticated-User-token
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyContentRequest'
            example:
              request:
                content:
                  createdBy: user1
                  createdFor:
                    - user2
                  organisation:
                    - sunbird
                  framework: NCF
      responses:
        '200':
          description: >-
            OK ! Successful operation."Copy" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCopySuccessResponse'
              example:
                id: api.content.copy
                ver: '1.0'
                ts: '2020-12-11T23:28:25.343Z'
                params:
                  resmsgid: 90e788f0-3c08-11eb-b0a2-8d5c9f561887
                  msgid: 90b3f5d0-3c08-11eb-b0a2-8d5c9f561887
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id:
                    do_21316884557433241613378: do_21317051846683852813814
                  versionKey: '1607729305036'
        '400':
          description: >-
            BAD REQUEST. The "Copy Content" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.content.copy
                ver: '1.0'
                ts: '2020-12-11T23:27:31.708Z'
                params:
                  resmsgid: 70ef7bc0-3c08-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: ERR_INVALID_REQUEST
                  errmsg: >-
                    Please provide valid value for List(createdBy, createdFor,
                    organisation, framework)
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Copy** operation failed !The
            possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.content.copy
                ver: '1.0'
                ts: '2020-12-11T23:28:36.863Z'
                params:
                  resmsgid: 97c558f0-3c08-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_213168845574332416133781
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /content/v1/import:
    post:
      description: |-
        This API is associated with importing a content on the Sunbird Platform from different environment.
          - The **_/import/_**endpoint executes request for impoting content, if content is found appropriate.
          - The endpoint for **Import Content** is `/content/v1/import`
          - It points to content-service - `/content/v3/import`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Import Content
      tags:
        - Content APIs
      operationId: Import Content
      parameters:
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportContentRequest'
            example:
              request:
                content:
                  - source: 'https://vdn.diksha.gov.in/api/content/v1/read/do_4313124780355543040126730'
                    metadata: {}
                    collection:
                      - identifier: do_3131112587361648641337
                        unitId: do_3131112587369922561425
      responses:
        '200':
          description: >-
            OK ! Successful operation."Import" operation was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentImportSuccessResponse'
              example:
                id: api.content.import
                ver: '3.0'
                ts: '2020-12-17T16:29:11ZZ'
                params:
                  resmsgid: 7cce8934-0a2f-46bf-a0ee-be5f49874cae
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  processId: 80a765c7-2202-4b3f-b473-448b5c2cd20e
        '400':
          description: >-
            BAD REQUEST. The "Import Content" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
              example:
                id: api.content.import
                ver: '3.0'
                ts: '2020-12-17T16:30:16ZZ'
                params:
                  resmsgid: 31f88a39-2514-4d86-b424-240166e315be
                  msgid: null
                  err: ERR_REQUIRED_PROPS_VALIDATION
                  status: failed
                  errmsg: 'Validation Failed! Mandatory Properties Are [name, code, mimeType, primaryCategory, artifactUrl, framework]'
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
components:
  schemas:
    CreateContentRequest:
      title: Request Object
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentCreateRequestContent'
    ContentCreateRequestContent:
      title: Request
      required:
        - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ContentCreateRequestContentObject'
    ContentCreateRequestContentObject:
      title: Content
      required:
        - code
        - mimeType
        - name
        - contentType
        - createdBy
      type: object
      properties:
        name:
          type: string
          description: Represents the name of the content
        code:
          type: string
          description: Represents the unique code for the content
        mimeType:
          type: string
          description: Content mime type
        contentType:
          type: string
          description: 'Content Type. eg- TextBook, Resource, etc'
        createdBy:
          type: string
          description: ID of the user who created Content
    UpdateContentrequest:
      title: Update ContentRequest
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentUpdateRequestContent'
      required:
        - request
    ContentUpdateRequestContent:
      title: ContentUpdateRequestContent
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ContentUpdateRequestContentObject'
      required:
        - content
    ContentUpdateRequestContentObject:
      title: Content
      required:
        - versionKey
      type: object
      properties:
        versionKey:
          type: string
          description: Represents the transaction update version key of the content
        description:
          type: string
          description: Represents the description for the content
    PublishContentRequest:
      title: Publish ContentRequest
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentPublishRequestContent'
      required:
        - request
    ContentPublishRequestContent:
      title: ContentPublishRequestContent
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ContentPublishRequestContentObject'
      required:
        - content
    ContentPublishRequestContentObject:
      title: ContentPublishRequestContentObject
      type: object
      properties:
        lastPublishedBy:
          description: user id who published the content
          type: string
      required:
        - lastPublishedBy
    FlagAcceptContentRequest:
      title: Flag Accept ContentRequest
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentFlagAcceptRequestContent'
      required:
        - request
    ContentFlagAcceptRequestContent:
      title: ContentFlagAcceptRequestContent
      type: object
      properties:
        versionKey:
          description: versionKey of content
          type: string
      required:
        - versionKey
    CopyContentRequest:
      title: Copy Content Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentCopyRequestContent'
    ContentCopyRequestContent:
      title: Content Copy Request Content
      required:
        - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ContentCopyRequestContentObject'
    ContentCopyRequestContentObject:
      title: Content Copy Request Content Object
      required:
        - createdBy
        - createdFor
        - organisation
        - framework
      type: object
      properties:
        createdBy:
          type: string
          description: Represents the creator of the content
        createdFor:
          type: string
          description: Represents for whom content is created
        organisation:
          type: string
          description: Represents for which organisation content is created
        framework:
          type: string
          description: Represents framework with which content is tagged
    ImportContentRequest:
      title: Import Content Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentImportRequestContent'
    ContentImportRequestContent:
      title: Content Import Request Content
      required:
        - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ContentImportRequestContentObject'
    ContentImportRequestContentObject:
      title: Content Import Request Content Object
      type: object
      properties:
        stage:
          type: string
          description: Represents the creator of the content
        source:
          type: string
          description: Represents for whom content is created
        metadata:
          type: object
          description: Represents for which organisation content is created
        collection:
          type: array
          description: Represents framework with which content is tagged
          items:
            type: object
            description: Represents collection and unit ids with which imported content has to be linked
    UploadUrlContentRequest:
      title: Upload Url Content Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentUploadUrlRequestContent'
    ContentUploadUrlRequestContent:
      title: Content Upload Url Request Content
      required:
        - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ContentUploadUrlRequestContentObject'
    ContentUploadUrlRequestContentObject:
      title: Content Upload Url Request Content Object
      required:
        - fileName
      type: object
      properties:
        fileName:
          type: string
          description: >-
            Represents the name of the file against which url has to be
            generated.
    ContentCreateSuccessResponse:
      description: Create Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/ResultWithContentId'
        - $ref: '#/components/schemas/ResponseHeader'
    ResultWithContentId:
      title: Result Containing Content Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ContentId'
    ContentId:
      title: Content Id
      type: object
      properties:
        node_id:
          type: string
          description: Content Identifier
        content_id:
          type: string
          description: Content Identifier
        versionKey:
          type: string
          description: Content versionKey
    ContentUploadSuccessResponse:
      description: Upload Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/UploadResultWithContentId'
        - $ref: '#/components/schemas/ResponseHeader'
    UploadResultWithContentId:
      title: Result Containing Content Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ContentId'
    UploadContentId:
      title: Content Id
      type: object
      properties:
        node_id:
          type: string
          description: Content Identifier
        content_id:
          type: string
          description: Content Identifier
        versionKey:
          type: string
          description: Content versionKey
        artifactUrl:
          type: string
          description: Content uploaded file url link
        content_url:
          type: string
          description: Content uploaded file url link
    ContentGetSuccessResponse:
      description: Get Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/ResultWithContentMetadata'
        - $ref: '#/components/schemas/ResponseHeader'
    ResultWithContentMetadata:
      title: Result Containing Content Id and other metadata
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ContentIdWithMetadata'
    ContentIdWithMetadata:
      title: Content Metadata
      type: object
      properties:
        identifier:
          type: string
          description: Content Identifier
        name:
          type: string
          description: Content name
        versionKey:
          type: string
          description: Content versionKey
    ContentPublishSuccessResponse:
      description: Publish Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/PublishResultWithContentId'
        - $ref: '#/components/schemas/ResponseHeader'
    PublishResultWithContentId:
      title: Result Containing Content Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PublishContentId'
    PublishContentId:
      title: Content Id
      type: object
      properties:
        content_id:
          type: string
          description: Content Identifier
        publishStatus:
          type: string
          description: Status of the publish event
    ContentRejectSuccessResponse:
      description: Reject Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/RejectResultWithContentId'
        - $ref: '#/components/schemas/ResponseHeader'
    RejectResultWithContentId:
      title: Reject Result Containing Content Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/RejectContentId'
    RejectContentId:
      title: Reject Content Id
      type: object
      properties:
        node_id:
          type: string
          description: Content Identifier
        versionKey:
          type: string
          description: Content versionKey
    ContentFlagSuccessResponse:
      description: Flag Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/FlagResultWithContentId'
        - $ref: '#/components/schemas/ResponseHeader'
    FlagResultWithContentId:
      title: Reject Result Containing Content Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/FlagContentId'
    FlagContentId:
      title: Reject Content Id
      type: object
      properties:
        node_id:
          type: string
          description: Content Identifier
        identifier:
          type: string
          description: Content Identifier
        versionKey:
          type: string
          description: Content versionKey
    ContentRetireSuccessResponse:
      description: Create Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/RetireResultWithContentId'
        - $ref: '#/components/schemas/ResponseHeader'
    RetireResultWithContentId:
      title: Retire Result Containing Content Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/RetireContentId'
    RetireContentId:
      title: Content Id
      type: object
      properties:
        node_id:
          type: string
          description: Content Identifier
        identifier:
          type: string
          description: Content Identifier
    ContentCopySuccessResponse:
      description: Create Copy Response
      type: object
      allOf:
        - $ref: '#/components/schemas/ResultCopyContent'
        - $ref: '#/components/schemas/ResponseHeader'
    ResultCopyContent:
      title: Result Copy Content
      type: object
      properties:
        result:
          $ref: '#/components/schemas/CopyContent'
    CopyContent:
      title: Copy Content
      type: object
      properties:
        node_id:
          type: object
          description: Origin and copyied content ampping
        versionKey:
          type: string
          description: Content versionKey
    ContentImportSuccessResponse:
      description: Create Import Response
      type: object
      allOf:
        - $ref: '#/components/schemas/ResultImportContent'
        - $ref: '#/components/schemas/ResponseHeader'
    ResultImportContent:
      title: Result Import Content
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ImportContent'
    ImportContent:
      title: Import Content
      type: object
      properties:
        processId:
          type: object
          description: Represents Process id against which content import process started
    ContentUploadUrlSuccessResponse:
      description: Upload URL Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/UploadUrlResultWithContentId'
        - $ref: '#/components/schemas/ResponseHeader'
    UploadUrlResultWithContentId:
      title: Upload Url Result WithC ontentId
      type: object
      properties:
        result:
          $ref: '#/components/schemas/UploadUrlContentId'
    UploadUrlContentId:
      title: Upload Url ContentId
      type: object
      properties:
        identifier:
          type: string
          description: Content Identifier
        url_expiry:
          type: string
          description: Url expiry time
        pre_signed_url:
          type: string
          description: pre-signed url link
    ContentCreateErrorResponse:
      description: Create Content Error Response
      type: object
      allOf:
        - $ref: '#/components/schemas/EmptyResult'
        - $ref: '#/components/schemas/ResponseHeader'
    EmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          description: Empty Result
    ResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/ResponseParams'
        responseCode:
          type: string
          description: 'API response code '
    ResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header